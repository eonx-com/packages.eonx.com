(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{211:function(e,t,i){"use strict";i.r(t);var a=i(3),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"usage"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),i("p",[e._v("The EasyActivity package stores activity log entries for actions performed on subjects. Activity log entries are stored\nas database records in the "),i("code",[e._v("easy_activity_logs")]),e._v(" table by default (the table name can be changed in the package\n"),i("RouterLink",{attrs:{to:"/packages/easy-activity/config.html"}},[e._v("configuration")]),e._v("). See the "),i("RouterLink",{attrs:{to:"/packages/easy-activity/activity-log-entry.html"}},[e._v("ActivityLogEntry class")]),e._v(" for more information on what can be stored in the database\nrecord.")],1),e._v(" "),i("p",[e._v("An application can either use "),i("code",[e._v("EonX\\EasyActivity\\Bridge\\Doctrine\\DoctrineDbalStatementsProvider")]),e._v(" to create a table or\ndescribe a database entity/model relying on this table by itself.")]),e._v(" "),i("h2",{attrs:{id:"resolving-actors"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#resolving-actors"}},[e._v("#")]),e._v(" Resolving actors")]),e._v(" "),i("p",[e._v("To resolve an actor's identifier, name and type, the package relies on\n"),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\ActorResolverInterface")]),e._v(".")]),e._v(" "),i("p",[e._v("Although a default implementation is provided by the package ("),i("code",[e._v("EonX\\EasyActivity\\Resolvers\\DefaultActorResolver")]),e._v("), it\nonly sets the actor's type to the default ("),i("code",[e._v("system")]),e._v("), so your application should register its own implementation of the\ninterface to provide the required values (e.g. from a Security Context).")]),e._v(" "),i("h2",{attrs:{id:"resolving-subjects"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#resolving-subjects"}},[e._v("#")]),e._v(" Resolving subjects")]),e._v(" "),i("p",[e._v("To resolve a subject's identifier, type, data and old data, the package relies on\n"),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\ActivitySubjectResolverInterface")]),e._v(".")]),e._v(" "),i("p",[e._v("The package provides a default implementation ("),i("code",[e._v("EonX\\EasyActivity\\Resolvers\\DefaultActivitySubjectResolver")]),e._v("), but you\ncan implement your own instead.")]),e._v(" "),i("h2",{attrs:{id:"creating-activity-log-entries"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#creating-activity-log-entries"}},[e._v("#")]),e._v(" Creating activity log entries")]),e._v(" "),i("p",[e._v("To create a new activity log entry, an application can use one of the following methods:")]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("EasyDoctrine")]),e._v(": Install the "),i("a",{attrs:{href:"https://github.com/eonx-com/easy-doctrine",target:"_blank",rel:"noopener noreferrer"}},[e._v("eonx-com/easy-doctrine"),i("OutboundLink")],1),e._v(" package that provides events for Doctrine entity creation,\nupdate and deletion. EasyActivity has a bridge for EasyDoctrine that contains\n"),i("code",[e._v("EonX\\EasyActivity\\Bridge\\EasyDoctrine\\EasyDoctrineEntityEventsSubscriber")]),e._v(", which will take care of accepting those\nevents and passing them to "),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\ActivityLogEntryFactoryInterface")]),e._v(". The bridge also passes the\nsubject list from the EasyActivity configuration to the EasyDoctrine configuration (so the EasyDoctrine knows which\nDoctrine entities to listen to).")]),e._v(" "),i("li",[i("strong",[e._v("Eloquent")]),e._v(": Use an Eloquent bridge with a listener for Eloquent events that will take care of passing model data to\n"),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\ActivityLogEntryFactoryInterface")]),e._v(" (not implemented yet).")]),e._v(" "),i("li",[i("strong",[e._v("Manual creation")]),e._v(": Create activity log entries manually using\n"),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\ActivityLogEntryFactoryInterface")]),e._v(", with either the default\n"),i("code",[e._v("EonX\\EasyActivity\\ActivityLogEntryFactory")]),e._v(" implementation or your own implementation registered for the interface.")])]),e._v(" "),i("p",[e._v("To save a new activity log entry the package relies on "),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\ActivityLoggerInterface")]),e._v(". An\napplication can register its own implementation or use one of the following:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("EonX\\EasyActivity\\Logger\\AsyncActivityLogger")]),e._v(" to save an activity log entry asynchronously (this is the default)")]),e._v(" "),i("li",[i("code",[e._v("EonX\\EasyActivity\\Logger\\SyncActivityLogger")]),e._v(" to save an activity log entry synchronously")])]),e._v(" "),i("h2",{attrs:{id:"symfony-bridge"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#symfony-bridge"}},[e._v("#")]),e._v(" Symfony bridge")]),e._v(" "),i("p",[e._v("The Symfony bridge provided with this package allows it to be integrated into a Symfony-based application. Besides\nSymfony bundle/extension classes, it brings the following functionality:")]),e._v(" "),i("ul",[i("li",[e._v("The default implementation for "),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\ActivitySubjectDataSerializerInterface")]),e._v(":\n"),i("code",[e._v("EonX\\EasyActivity\\Bridge\\Symfony\\Serializers\\SymfonyActivitySubjectDataSerializer")]),e._v(", which is a simple wrapper for\n"),i("code",[e._v("Symfony\\Component\\Serializer\\SerializerInterface")]),e._v(" used to serialize activity log entry data. Please note that all\nthe nested objects are serialized as an array containing only the "),i("code",[e._v("id")]),e._v(" key by default. You can change the default\nbehaviour with the "),i("code",[e._v("nested_object_allowed_properties")]),e._v(" configuration option (see "),i("RouterLink",{attrs:{to:"/packages/easy-activity/config.html"}},[e._v("Configuration")]),e._v(").")],1),e._v(" "),i("li",[e._v("The Symfony Messenger classes that are used for asynchronous activity log entry storing.")]),e._v(" "),i("li",[e._v("The default implementation for "),i("code",[e._v("EonX\\EasyActivity\\Interfaces\\StoreInterface")]),e._v(":\n"),i("code",[e._v("EonX\\EasyActivity\\Bridge\\Doctrine\\DoctrineDbalStore")]),e._v(", which stores the activity log entries using a DBAL connection.\nAn application can register its own implementation for this interface to be able to store activity log entries in a\ndifferent way or using different storage.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);