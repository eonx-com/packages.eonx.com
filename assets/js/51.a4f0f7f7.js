(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{244:function(e,o,r){"use strict";r.r(o);var n=r(3),t=Object(n.a)({},(function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("The Symfony bridge of this package allows you to define your logging config providers and logger configurators anywhere\nand use the container to register them to be used by the logger factory.")]),e._v(" "),r("p",[e._v("It requires to tag the different config providers and logger configurators as follows:")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("HandlerConfigProviderInterface:")]),e._v(" "),r("code",[e._v("easy_logging.handler_config_provider")])]),e._v(" "),r("li",[r("strong",[e._v("ProcessorConfigProviderInterface:")]),e._v(" "),r("code",[e._v("easy_logging.processor_config_provider")])]),e._v(" "),r("li",[r("strong",[e._v("LoggerConfiguratorInterface:")]),e._v(" "),r("code",[e._v("easy_logging.logger_configurator")])])]),e._v(" "),r("p",[e._v("By default, the Symfony Bridge will register each interface listed below for auto-configuration and add the required\ntag, so you have nothing to do.")]),e._v(" "),r("p",[e._v("However, if you need to tag services manually (e.g. 3rd party package), to make this process easier,\nthis package provides you with public constants you can use for the tags name.\nThese constants are defined on "),r("code",[e._v("EonX\\EasyLogging\\Bridge\\BridgeConstantsInterface")]),e._v(".")])])}),[],!1,null,null,null);o.default=t.exports}}]);